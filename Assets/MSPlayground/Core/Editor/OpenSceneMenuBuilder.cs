
using System.IO;
using UnityEditor;

namespace MSPlayground.Core
{
	/// <summary>
	/// Generate an editor OpenScene menu from all scenes in the BuildSettings.
	/// </summary>
	public class OpenSceneMenuBuilder
	{
		const string OPEN_SCENE_PATH = "Assets/Editor/OpenScene.Generated/OpenScene.cs";

		[MenuItem("OpenScene/Regenerate Menu", false, 1000)]
		static void RegenerateMenu()
		{
			string menuItemsString = "";
			int sceneIndex = 0;

			foreach (EditorBuildSettingsScene scene in EditorBuildSettings.scenes)
			{
				menuItemsString += MenuItemTemplate.Replace("%scenepath%", scene.path).
					Replace("%funcname%", "OpenScene" + sceneIndex).
					Replace("%scenename%", Path.GetFileNameWithoutExtension(scene.path)).
					Replace("%priority%", sceneIndex.ToString());
				sceneIndex++;
			}

			string openMenuCS = FileTemplate.Replace("%menuitems%", menuItemsString);

			string fullPath = Path.Combine(Directory.GetCurrentDirectory(), OPEN_SCENE_PATH);

			string directory = Path.GetDirectoryName(fullPath);
			if (!Directory.Exists(directory))
			{
				Directory.CreateDirectory(directory);
			}

			File.WriteAllText(fullPath, openMenuCS);

			AssetDatabase.ImportAsset(OPEN_SCENE_PATH);
		}

		const string FileTemplate = @"
//
//	This code is autogenerated.  Please do not modify by hand.
//

using UnityEngine;
using UnityEditor;
using UnityEditor.SceneManagement;

public class OpenSceneMenu
{
%menuitems%
}
";

		const string MenuItemTemplate = @"
[MenuItem(""OpenScene/%scenename%"",false,%priority%)]
static void %funcname%()
{
	EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();
	EditorSceneManager.OpenScene(""%scenepath%"", OpenSceneMode.Single);
}

[MenuItem(""OpenScene/%scenename% Additive"",false,%priority%)]
static void %funcname%_Additive()
{
	EditorSceneManager.OpenScene(""%scenepath%"", OpenSceneMode.Additive);
}

";
	}
}
